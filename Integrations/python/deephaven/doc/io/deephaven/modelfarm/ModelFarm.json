{
 "className": "io.deephaven.modelfarm.ModelFarm",
 "methods": {
  "awaitTermination": "**Incompatible overloads text - text from the first overload:**\n\nBlocks until all tasks have completed execution after a shutdown\n request, or the timeout occurs, whichever happens first.\n\n*Overload 1*  \n  :return: (boolean) true if this executor terminated and\n           false if the timeout elapsed before termination\n  \n*Overload 2*  \n  :param timeout: (long) - the maximum time to wait\n  :param unit: (java.util.concurrent.TimeUnit) - the time unit of the timeout argument\n  :return: (boolean) true if this executor terminated and\n           false if the timeout elapsed before termination",
  "shutdown": "Initiates an orderly shutdown in which previously submitted\n tasks are executed, but no new tasks will be accepted.\n Invocation has no additional effect if already shut down.\n \nThis method does not wait for previously submitted tasks to\n complete execution.  Use awaitTermination\n to do that.",
  "shutdownAndAwaitTermination": "Shuts down and then awaits termination.\n\n*Overload 1*  \n  \n  \n*Overload 2*  \n  :param timeout: (long) - the maximum time to wait\n  :param unit: (java.util.concurrent.TimeUnit) - the time unit of the timeout argument\n  :return: (boolean) true if this executor terminated and\n           false if the timeout elapsed before termination",
  "start": "Initiates execution.",
  "terminate": "Initiates an immediate termination of all tasks.\n Unexecuted tasks will not be executed.  Tasks already executing may not be interrupted."
 },
 "path": "io.deephaven.modelfarm.ModelFarm",
 "text": "A multithreaded resource to execute data driven models.",
 "typeName": "interface"
}