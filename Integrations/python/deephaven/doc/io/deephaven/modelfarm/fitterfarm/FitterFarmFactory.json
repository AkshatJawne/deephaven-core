{
 "className": "io.deephaven.modelfarm.fitterfarm.FitterFarmFactory",
 "methods": {
  "newEquityFitterOptionPriceHistorical": "**Incompatible overloads text - text from the first overload:**\n\nCreate a multithreaded resource to fit a derivative model's parameters for equities when a snapshot table ticks.\n The model is fit directly from option prices.\n Because this blocks when the backlog fills, it is most applicable to fitting replayed historical data.\n \n Tables must have the following columns:\n underlying:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* Id, long\n* Sym, String\n* Type, String\n* Bid, double\n* Ask, double\n* Last, double (optional)\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n options:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* UId, long\n* Id, long\n* Sym, String\n* OptionRoot, String (optional)\n* PayoffType, String\n* ExerciseType, String\n* SettlementType, String\n* Expiration, DBDateTime\n* Strike, double\n* Bid, double\n* Ask, double\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n dividends:\n \n* FitGroup, String (optional)\n* Id, long\n* DivExDate, DBDateTime\n* DivCashAmount, double\n* DivProportionalAmount, double\n* Timestamp, DBDateTime (optional)\n\n\n yieldCurve:\n \n* FitGroup, String (optional)\n* Id, long (optional)\n* YieldCurveDate, DBDateTime\n* YieldCurveRate, double\n* Timestamp, DBDateTime (optional)\n\n\n carryCurve:\n \n* FitGroup, String (optional)\n* Id, long\n* CarryCurveDate, DBDateTime\n* CarryCurveRate, double\n* Timestamp, DBDateTime (optional)\n\n*Overload 1*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.equity.EquityFitDataOptionPrices>) - model to fit.\n  :param underlying: (io.deephaven.db.tables.Table) - data on the underlying securities.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param dividends: (io.deephaven.db.tables.Table) - dividends on the underlying securities.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param carryCurve: (io.deephaven.db.tables.Table) - cost-of-carry curve description.\n  :param snapshotTrigger: (io.deephaven.db.tables.Table) - table used to trigger new fits\n  :return: (io.deephaven.modelfarm.ModelFarm) historical fitter for equities\n  \n*Overload 2*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.equity.EquityFitDataOptionPrices>) - model to fit.\n  :param underlying: (io.deephaven.db.tables.Table) - data on the underlying securities.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param dividends: (io.deephaven.db.tables.Table) - dividends on the underlying securities.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param carryCurve: (io.deephaven.db.tables.Table) - cost-of-carry curve description.\n  :param queueSize: (int) - number of elements in the work queue backlog before the blocking new updates.\n  :param snapshotTrigger: (io.deephaven.db.tables.Table) - table used to trigger new fits\n  :return: (io.deephaven.modelfarm.ModelFarm) historical fitter for equities",
  "newEquityFitterOptionPriceRealTime": "Create a multithreaded resource to fit a derivative model's parameters for equities in real time.\n The model is fit directly from option prices.\n \n Tables must have the following columns:\n underlying:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* Id, long\n* Sym, String\n* Type, String\n* Bid, double\n* Ask, double\n* Last, double (optional)\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n options:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* UId, long\n* Id, long\n* Sym, String\n* OptionRoot, String (optional)\n* PayoffType, String\n* ExerciseType, String\n* SettlementType, String\n* Expiration, DBDateTime\n* Strike, double\n* Bid, double\n* Ask, double\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n dividends:\n \n* FitGroup, String (optional)\n* Id, long\n* DivExDate, DBDateTime\n* DivCashAmount, double\n* DivProportionalAmount, double\n* Timestamp, DBDateTime (optional)\n\n\n yieldCurve:\n \n* FitGroup, String (optional)\n* Id, long (optional)\n* YieldCurveDate, DBDateTime\n* YieldCurveRate, double\n* Timestamp, DBDateTime (optional)\n\n\n carryCurve:\n \n* FitGroup, String (optional)\n* Id, long\n* CarryCurveDate, DBDateTime\n* CarryCurveRate, double\n* CarryCurveError, double\n* Timestamp, DBDateTime (optional)\n\n*Overload 1*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.equity.EquityFitDataOptionPrices>) - model to fit.\n  :param underlying: (io.deephaven.db.tables.Table) - data on the underlying securities.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param dividends: (io.deephaven.db.tables.Table) - dividends on the underlying securities.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param carryCurve: (io.deephaven.db.tables.Table) - cost-of-carry curve description.\n  :return: (io.deephaven.modelfarm.ModelFarm) real-time fitter for equities\n  \n*Overload 2*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.equity.EquityFitDataOptionPrices>) - model to fit.\n  :param underlying: (io.deephaven.db.tables.Table) - data on the underlying securities.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param dividends: (io.deephaven.db.tables.Table) - dividends on the underlying securities.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param carryCurve: (io.deephaven.db.tables.Table) - cost-of-carry curve description.\n  :param prioritizer: (io.deephaven.modelfarm.fitterfarm.equity.EquityPrioritizer<io.deephaven.modelfarm.fitterfarm.equity.EquityFitDataOptionPrices>) - utility for computing the priority for performing a fit.\n  :return: (io.deephaven.modelfarm.ModelFarm) real-time fitter for equities",
  "newEquityFitterVolSurfaceHistorical": "**Incompatible overloads text - text from the first overload:**\n\nCreate a multithreaded resource to fit a derivative model's parameters for equities when a snapshot table ticks.\n The model is fit from a vol surface.\n Because this blocks when the backlog fills, it is most applicable to fitting replayed historical data.\n \n Tables must have the following columns:\n underlying:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* Id, long\n* Sym, String\n* Type, String\n* Bid, double\n* Ask, double\n* Last, double (optional)\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n options:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* Id, long\n* Sym, String\n* OptionRoot, String (optional)\n* PayoffType, String\n* ExerciseType, String\n* SettlementType, String\n* Expiration, DBDateTime\n* Strike, double\n* Bid, double\n* Ask, double\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n volSurfaceForwards:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* Expiration, DBDateTime\n* ForwardPrice, double\n* ForwardError, double\n\n\n volSurfaceVols:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* Expiration, DBDateTime\n* Strike, double\n* ImpliedVol, double\n* ImpliedVolError, double\n\n\n dividends:\n \n* FitGroup, String (optional)\n* Id, long\n* DivExDate, DBDateTime\n* DivCashAmount, double\n* DivProportionalAmount, double\n* Timestamp, DBDateTime (optional)\n\n\n yieldCurve:\n \n* FitGroup, String (optional)\n* Id, long (optional)\n* YieldCurveDate, DBDateTime\n* YieldCurveRate, double\n* Timestamp, DBDateTime (optional)\n\n\n carryCurve:\n \n* FitGroup, String (optional)\n* Id, long\n* CarryCurveDate, DBDateTime\n* CarryCurveRate, double\n* CarryCurveError, double\n* Timestamp, DBDateTime (optional)\n\n*Overload 1*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.equity.EquityFitDataVolSurface>) - model to fit.\n  :param underlying: (io.deephaven.db.tables.Table) - data on the underlying securities.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param volSurfaceForwards: (io.deephaven.db.tables.Table) - forwards used in computing the vol surface.\n  :param volSurfaceVols: (io.deephaven.db.tables.Table) - vol surface vols.\n  :param dividends: (io.deephaven.db.tables.Table) - dividends on the underlying securities.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param carryCurve: (io.deephaven.db.tables.Table) - cost-of-carry curve description.\n  :param snapshotTrigger: (io.deephaven.db.tables.Table) - table used to trigger new fits\n  :return: (io.deephaven.modelfarm.ModelFarm) historical fitter for equities\n  \n*Overload 2*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.equity.EquityFitDataVolSurface>) - model to fit.\n  :param underlying: (io.deephaven.db.tables.Table) - data on the underlying securities.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param volSurfaceForwards: (io.deephaven.db.tables.Table) - forwards used in computing the vol surface.\n  :param volSurfaceVols: (io.deephaven.db.tables.Table) - vol surface vols.\n  :param dividends: (io.deephaven.db.tables.Table) - dividends on the underlying securities.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param carryCurve: (io.deephaven.db.tables.Table) - cost-of-carry curve description.\n  :param queueSize: (int) - number of elements in the work queue backlog before the blocking new updates.\n  :param snapshotTrigger: (io.deephaven.db.tables.Table) - table used to trigger new fits\n  :return: (io.deephaven.modelfarm.ModelFarm) historical fitter for equities",
  "newEquityFitterVolSurfaceRealTime": "Create a multithreaded resource to fit a derivative model's parameters for equities in real time.\n The model is fit from a vol surface.\n \n Tables must have the following columns:\n underlying:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* Id, long\n* Sym, String\n* Type, String\n* Bid, double\n* Ask, double\n* Last, double (optional)\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n options:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* Id, long\n* Sym, String\n* OptionRoot, String (optional)\n* PayoffType, String\n* ExerciseType, String\n* SettlementType, String\n* Expiration, DBDateTime\n* Strike, double\n* Bid, double\n* Ask, double\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n volSurfaceForwards:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* Expiration, DBDateTime\n* ForwardPrice, double\n* ForwardError, double\n\n\n volSurfaceVols:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* Expiration, DBDateTime\n* Strike, double\n* ImpliedVol, double\n* ImpliedVolError, double\n\n\n dividends:\n \n* FitGroup, String (optional)\n* Id, long\n* DivExDate, DBDateTime\n* DivCashAmount, double\n* DivProportionalAmount, double\n* Timestamp, DBDateTime (optional)\n\n\n yieldCurve:\n \n* FitGroup, String (optional)\n* Id, long (optional)\n* YieldCurveDate, DBDateTime\n* YieldCurveRate, double\n* Timestamp, DBDateTime (optional)\n\n\n carryCurve:\n \n* FitGroup, String (optional)\n* Id, long\n* CarryCurveDate, DBDateTime\n* CarryCurveRate, double\n* CarryCurveError, double\n* Timestamp, DBDateTime (optional)\n\n*Overload 1*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.equity.EquityFitDataVolSurface>) - model to fit.\n  :param underlying: (io.deephaven.db.tables.Table) - data on the underlying securities.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param volSurfaceForwards: (io.deephaven.db.tables.Table) - forwards used in computing the vol surface.\n  :param volSurfaceVols: (io.deephaven.db.tables.Table) - vol surface vols.\n  :param dividends: (io.deephaven.db.tables.Table) - dividends on the underlying securities.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param carryCurve: (io.deephaven.db.tables.Table) - cost-of-carry curve description.\n  :return: (io.deephaven.modelfarm.ModelFarm) real-time fitter for equities\n  \n*Overload 2*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.equity.EquityFitDataVolSurface>) - model to fit.\n  :param underlying: (io.deephaven.db.tables.Table) - data on the underlying securities.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param volSurfaceForwards: (io.deephaven.db.tables.Table) - forwards used in computing the vol surface.\n  :param volSurfaceVols: (io.deephaven.db.tables.Table) - vol surface vols.\n  :param dividends: (io.deephaven.db.tables.Table) - dividends on the underlying securities.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param carryCurve: (io.deephaven.db.tables.Table) - cost-of-carry curve description.\n  :param prioritizer: (io.deephaven.modelfarm.fitterfarm.equity.EquityPrioritizer<io.deephaven.modelfarm.fitterfarm.equity.EquityFitDataVolSurface>) - utility for computing the priority for performing a fit.\n  :return: (io.deephaven.modelfarm.ModelFarm) real-time fitter for equities",
  "newFuturesFitterOptionPriceHistorical": "Create a multithreaded resource to fit a derivative model's parameters for futures when a snapshot table ticks.\n The model is fit directly from option prices.\n Because this blocks when the backlog fills, it is most applicable to fitting replayed historical data.\n \n Tables must have the following columns:\n futures:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* UId, long\n* USym, String\n* Id, long\n* Sym, String\n* Expiration, DBDateTime\n* Bid, double\n* Ask, double\n* Last, double (optional)\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n options:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* UId, long\n* UCId, long\n* Id, long\n* Sym, String\n* OptionRoot, String (optional)\n* PayoffType, String\n* ExerciseType, String\n* SettlementType, String\n* Expiration, DBDateTime\n* Strike, double\n* Bid, double\n* Ask, double\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n yieldCurve:\n \n* FitGroup, String (optional)\n* Id, long (optional)\n* YieldCurveDate, DBDateTime\n* YieldCurveRate, double\n* Timestamp, DBDateTime (optional)\n\n*Overload 1*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.futures.FuturesFitDataOptionPrices>) - model to fit.\n  :param futures: (io.deephaven.db.tables.Table) - data on the underlying futures.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param snapshotTrigger: (io.deephaven.db.tables.Table) - table used to trigger new fits\n  :return: (io.deephaven.modelfarm.ModelFarm) historical fitter for equities\n  \n*Overload 2*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.futures.FuturesFitDataOptionPrices>) - model to fit.\n  :param futures: (io.deephaven.db.tables.Table) - data on the underlying futures.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param queueSize: (int) - number of elements in the work queue backlog before the blocking new updates.\n  :param snapshotTrigger: (io.deephaven.db.tables.Table) - table used to trigger new fits\n  :return: (io.deephaven.modelfarm.ModelFarm) historical fitter for equities",
  "newFuturesFitterOptionPriceRealTime": "Create a multithreaded resource to fit a derivative model's parameters for futures in real time.\n The model is fit directly from option prices.\n \n Tables must have the following columns:\n futures:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* UId, long\n* USym, String\n* Id, long\n* Sym, String\n* Expiration, DBDateTime\n* Bid, double\n* Ask, double\n* Last, double (optional)\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n options:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* UId, long\n* UCId, long\n* Id, long\n* Sym, String\n* OptionRoot, String (optional)\n* PayoffType, String\n* ExerciseType, String\n* SettlementType, String\n* Expiration, DBDateTime\n* Strike, double\n* Bid, double\n* Ask, double\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n yieldCurve:\n \n* FitGroup, String (optional)\n* Id, long (optional)\n* YieldCurveDate, DBDateTime\n* YieldCurveRate, double\n* Timestamp, DBDateTime (optional)\n\n*Overload 1*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.futures.FuturesFitDataOptionPrices>) - model to fit.\n  :param futures: (io.deephaven.db.tables.Table) - data on the underlying futures.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :return: (io.deephaven.modelfarm.ModelFarm) real-time fitter for equities\n  \n*Overload 2*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.futures.FuturesFitDataOptionPrices>) - model to fit.\n  :param futures: (io.deephaven.db.tables.Table) - data on the underlying futures.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param prioritizer: (io.deephaven.modelfarm.fitterfarm.futures.FuturesPrioritizer<io.deephaven.modelfarm.fitterfarm.futures.FuturesFitDataOptionPrices>) - utility for computing the priority for performing a fit.\n  :return: (io.deephaven.modelfarm.ModelFarm) real-time fitter for equities",
  "newFuturesFitterVolSurfaceHistorical": "Create a multithreaded resource to fit a derivative model's parameters for futures when a snapshot table ticks.\n The model is fit from a vol surface.\n Because this blocks when the backlog fills, it is most applicable to fitting replayed historical data.\n \n Tables must have the following columns:\n futures:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* UId, long\n* USym, String\n* Id, long\n* Sym, String\n* Expiration, DBDateTime\n* Bid, double\n* Ask, double\n* Last, double (optional)\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n options:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* UCId, long\n* Id, long\n* Sym, String\n* OptionRoot, String (optional)\n* PayoffType, String\n* ExerciseType, String\n* SettlementType, String\n* Expiration, DBDateTime\n* Strike, double\n* Bid, double\n* Ask, double\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n volSurfaceForwards:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* Expiration, DBDateTime\n* ForwardPrice, double\n* ForwardError, double\n\n\n volSurfaceVols:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* Expiration, DBDateTime\n* Strike, double\n* ImpliedVol, double\n* ImpliedVolError, double\n\n\n yieldCurve:\n \n* FitGroup, String (optional)\n* Id, long (optional)\n* YieldCurveDate, DBDateTime\n* YieldCurveRate, double\n* Timestamp, DBDateTime (optional)\n\n*Overload 1*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.futures.FuturesFitDataVolSurface>) - model to fit.\n  :param futures: (io.deephaven.db.tables.Table) - data on the underlying futures.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param volSurfaceForwards: (io.deephaven.db.tables.Table) - forwards used in computing the vol surface.\n  :param volSurfaceVols: (io.deephaven.db.tables.Table) - vol surface vols.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param snapshotTrigger: (io.deephaven.db.tables.Table) - table used to trigger new fits\n  :return: (io.deephaven.modelfarm.ModelFarm) historical fitter for equities\n  \n*Overload 2*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.futures.FuturesFitDataVolSurface>) - model to fit.\n  :param futures: (io.deephaven.db.tables.Table) - data on the underlying futures.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param volSurfaceForwards: (io.deephaven.db.tables.Table) - forwards used in computing the vol surface.\n  :param volSurfaceVols: (io.deephaven.db.tables.Table) - vol surface vols.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param queueSize: (int) - number of elements in the work queue backlog before the blocking new updates.\n  :param snapshotTrigger: (io.deephaven.db.tables.Table) - table used to trigger new fits\n  :return: (io.deephaven.modelfarm.ModelFarm) historical fitter for equities",
  "newFuturesFitterVolSurfaceRealTime": "Create a multithreaded resource to fit a derivative model's parameters for futures in real time.\n The model is fit from a vol surface.\n \n Tables must have the following columns:\n futures:\n \n* Timestamp, DBDateTime\n* FitGroup, String (optional)\n* UId, long\n* USym, String\n* Id, long\n* Sym, String\n* Expiration, DBDateTime\n* Bid, double\n* Ask, double\n* Last, double (optional)\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n options:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* UCId, long\n* Id, long\n* Sym, String\n* OptionRoot, String (optional)\n* PayoffType, String\n* ExerciseType, String\n* SettlementType, String\n* Expiration, DBDateTime\n* Strike, double\n* Bid, double\n* Ask, double\n* BidSize, double (optional)\n* AskSize, double (optional)\n* BidGap, double (optional)\n* AskGap, double (optional)\n\n\n volSurfaceForwards:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* Expiration, DBDateTime\n* ForwardPrice, double\n* ForwardError, double\n\n\n volSurfaceVols:\n \n* Timestamp, DBDateTime\n* FitGroup, String\n* UId, long\n* Expiration, DBDateTime\n* Strike, double\n* ImpliedVol, double\n* ImpliedVolError, double\n\n\n yieldCurve:\n \n* FitGroup, String (optional)\n* Id, long (optional)\n* YieldCurveDate, DBDateTime\n* YieldCurveRate, double\n* Timestamp, DBDateTime (optional)\n\n*Overload 1*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.futures.FuturesFitDataVolSurface>) - model to fit.\n  :param futures: (io.deephaven.db.tables.Table) - data on the underlying futures.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param volSurfaceForwards: (io.deephaven.db.tables.Table) - forwards used in computing the vol surface.\n  :param volSurfaceVols: (io.deephaven.db.tables.Table) - vol surface vols.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :return: (io.deephaven.modelfarm.ModelFarm) real-time fitter for equities\n  \n*Overload 2*  \n  :param nThreads: (int) - number of worker threads.\n  :param model: (io.deephaven.modelfarm.Model<io.deephaven.modelfarm.fitterfarm.futures.FuturesFitDataVolSurface>) - model to fit.\n  :param futures: (io.deephaven.db.tables.Table) - data on the underlying futures.\n  :param options: (io.deephaven.db.tables.Table) - data on the options.\n  :param volSurfaceForwards: (io.deephaven.db.tables.Table) - forwards used in computing the vol surface.\n  :param volSurfaceVols: (io.deephaven.db.tables.Table) - vol surface vols.\n  :param yieldCurve: (io.deephaven.db.tables.Table) - yield curve description.\n  :param prioritizer: (io.deephaven.modelfarm.fitterfarm.futures.FuturesPrioritizer<io.deephaven.modelfarm.fitterfarm.futures.FuturesFitDataVolSurface>) - utility for computing the priority for performing a fit.\n  :return: (io.deephaven.modelfarm.ModelFarm) real-time fitter for equities"
 },
 "path": "io.deephaven.modelfarm.fitterfarm.FitterFarmFactory",
 "text": "Factory methods to create multithreaded resources to fit a derivative model's parameters.",
 "typeName": "class"
}