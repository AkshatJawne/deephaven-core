{
 "className": "io.deephaven.db.v2.TableMapImpl",
 "methods": {
  "addKeyListener": "Listen to changes in the map's keys.\n\n:param listener: io.deephaven.db.v2.TableMap.KeyListener",
  "addListener": "Add a new listener for changes to the map.\n\n:param listener: io.deephaven.db.v2.TableMap.Listener",
  "addParentReference": "Called on a dependent node to ensure that a strong reference is maintained to any parent object that\n is required for the proper maintenance and functioning of the dependent.\n\n In the most common case, the parent object is a child listener to a parent node.  The parent node only keeps a\n weak reference to its child listener, but the listener maintains a strong reference to the parent node.\n In this scenario, the only strong reference to the listener (and thus indirectly to the parent node itself) is\n the reference kept by the dependent node.\n\n:param parent: java.lang.Object",
  "dropReference": "Drop a previously-retained reference to this referent.",
  "getWeakReference": "Get a WeakReference to this referent. This may be cached, or newly created.\n\n:return: (java.lang.ref.WeakReference<? extends io.deephaven.db.util.liveness.LivenessReferent>) A new or cached reference to this referent",
  "initializeTransientFieldsForLiveness": "Package-private for Serializable sub-classes to use in readObject only.\n Public to allow unit tests in another package to work around mock issues where the constructor is never invoked.\n\nNote: Java generics information - io.deephaven.util.annotations.@VisibleForTesting",
  "isRefreshing": "Is the node updating?\n\n:return: (boolean) true if the node is updating; false otherwise.",
  "removeKeyListener": "Removes a key change listener.\n\n:param listener: io.deephaven.db.v2.TableMap.KeyListener",
  "removeListener": "Removes a map change listener.\n\n:param listener: io.deephaven.db.v2.TableMap.Listener",
  "setRefreshing": "Change the node's refresh mode.\n\n:param refreshing: boolean\n:return: (boolean) new refreshing state",
  "tryManage": "Attempt to add the specified referent to this manager.\n\n:param referent: io.deephaven.db.util.liveness.LivenessReferent\n:return: (boolean) Whether the referent was in fact added",
  "tryRetainReference": "If this referent is \"live\", behave as LivenessReferent.retainReference() and return true.\n Otherwise, returns false rather than throwing an exception.\n\n:return: (boolean) True if this referent was retained, false otherwise"
 },
 "path": "io.deephaven.db.v2.TableMapImpl",
 "typeName": "class"
}