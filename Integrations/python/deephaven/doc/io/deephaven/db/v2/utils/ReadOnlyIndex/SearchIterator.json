{
 "className": "io.deephaven.db.v2.utils.ReadOnlyIndex$SearchIterator",
 "methods": {
  "advance": "Advance the current iterator position until currentValue()\n is greater than or equal to  v . The operation is a no-op (and returns true) if currentValue() is already >= 'v'.\n Returns true if the operation was successful.\n Otherwise, returns false. In this case the iteration is over and the iterator is exhausted;\n calls to hasNext() will return false, any other operation is undefined.\n \n\n Although calls to advance() may be interleaved with calls to hasNext()/next() if necessary,\n this is not the common case, as they are separate protocols having little to do with each other.\n In particular, when iterating with advance(), you do not use next() to bring the value you advanced\n to into view, even at the start of the iteration. Many common usages only involve calls to advance().\n \n\n:param v: (long) - a value to search forward from the current iterator position\n:return: (boolean) false if iteration is exhausted, otherwise true.",
  "binarySearchValue": "Advance the current iterator (start) position while the current value maintains\n comp.compareTargetTo(v, dir) > 0.\n If next to the last such value there is a value for which comp.compareTargetTo(v, dir) < 0,\n or no further values exist, then that last value satisfying comp,.compareTargetTo(v, dir) > 0\n is left as the current position and returned.\n If there are any elements for which comp.compareTargetTo(v, dir) == 0, one of such elements,\n no guarantee which one, is left as the current position and returned.\n If at call entry the iterator was exhausted, -1 is returned.\n If at call entry the iterator was just constructed and had never been advanced, it is moved\n to the first element (which becomes the current value).\n If the current value v is such that comp.compareTargetTo(v, dir) < 0,\n -1 is returned and the current position is not moved.\n \n\n Part of the contract of this method is that comp.compareTargetTo will only be called with\n values that are in the underlying container.\n \n\n:param comp: (io.deephaven.db.v2.utils.ReadOnlyIndex.TargetComparator) - a comparator used to search forward from the current iterator position\n:param dir: (int) - a direction to search for comp, either +1 for forward or -1 for backward.\n:return: (long) -1 if the iterator was exhausted at entry or the target was to the left of the initial\n position at the time of the call, in which case the iterator is not changed;\n the resulting current position otherwise.  In this later case the current position\n is guaranteed to satisfy comp.compareTargetTo(v, dir) >= 0\n and if also comp.compareTargetTo(v, dir) > 0, then\n v is the biggest such value for which comp.compareTargetTo(v, dir) > 0.",
  "currentValue": ":return: long",
  "hasNext": ":return: boolean",
  "nextLong": ":return: long"
 },
 "path": "io.deephaven.db.v2.utils.ReadOnlyIndex.SearchIterator",
 "typeName": "interface"
}