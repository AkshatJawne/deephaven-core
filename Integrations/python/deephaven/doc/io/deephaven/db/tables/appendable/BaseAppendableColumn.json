{
 "className": "io.deephaven.db.tables.appendable.BaseAppendableColumn",
 "methods": {
  "add": "**Incompatible overloads text - text from the first overload:**\n\nAppend a DATA_TYPE to this column count times.\n\n*Overload 1*  \n  :param value: BaseAppendableColumn.TYPE\n  \n*Overload 2*  \n  :param value: BaseAppendableColumn.TYPE\n  :param count: long\n  \n*Overload 3*  \n  :param values: BaseAppendableColumn.TYPE[]\n  :param startIndex: int\n  :param length: int",
  "addBoolean": "**Incompatible overloads text - text from the first overload:**\n\nAppend a Boolean to this column.\n\n*Overload 1*  \n  :param value: java.lang.Boolean\n  \n*Overload 2*  \n  :param value: java.lang.Boolean\n  :param count: long",
  "addBooleans": "Add Boolean values from an array.\n\n:param values: java.lang.Boolean[]\n:param startIndex: int\n:param length: int",
  "getAddHelper": "Get a type-appropriate helper instance for complex append operations.\n\n:return: (io.deephaven.db.tables.appendable.helpers.AppendableColumnAddHelper<BaseAppendableColumn.TYPE>) An add-helper for this column",
  "getName": "The name of this column in the enclosing table.\n\n:return: (java.lang.String) The name of this column",
  "getType": ":return: (java.lang.Class<BaseAppendableColumn.TYPE>) the type of object contained within this column."
 },
 "path": "io.deephaven.db.tables.appendable.BaseAppendableColumn",
 "text": "Base class for AppendableColumn implementations.",
 "typeName": "class"
}