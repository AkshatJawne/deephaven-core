{
 "className": "io.deephaven.db.tables.appendable.AppendableColumn",
 "methods": {
  "add": "**Incompatible overloads text - text from the first overload:**\n\nAppend a DATA_TYPE to this column count times.\n\n*Overload 1*  \n  :param value: (AppendableColumn.DATA_TYPE) - The value to append\n  \n*Overload 2*  \n  :param value: (AppendableColumn.DATA_TYPE) - The value to append\n  :param count: (long) - The number of times to append the value\n  \n*Overload 3*  \n  :param values: (AppendableColumn.DATA_TYPE[]) - The array of values\n  :param startIndex: (int) - The index of the first value to add\n  :param length: (int) - The total number of values to add",
  "addBoolean": "**Incompatible overloads text - text from the first overload:**\n\nAppend a Boolean to this column.\n\n*Overload 1*  \n  :param value: (java.lang.Boolean) - The value to append\n  \n*Overload 2*  \n  :param value: (java.lang.Boolean) - The value to append\n  :param count: (long) - The number of times to append the value",
  "addBooleans": "Add Boolean values from an array.\n\n:param values: (java.lang.Boolean[]) - The array of values\n:param startIndex: (int) - The index of the first value to add\n:param length: (int) - The total number of values to add",
  "addByte": "**Incompatible overloads text - text from the first overload:**\n\nAppend a byte to this column.\n\n*Overload 1*  \n  :param value: (byte) - The value to append\n  \n*Overload 2*  \n  :param value: (byte) - The value to append\n  :param count: (long) - The number of times to append the value",
  "addBytes": "**Incompatible overloads text - text from the first overload:**\n\nAdd byte values from a ByteBuffer, starting at buffer.position() and continuing to buffer.limit().\n\n*Overload 1*  \n  :param values: (byte[]) - The array of values\n  :param startIndex: (int) - The index of the first value to add\n  :param length: (int) - The total number of values to add\n  \n*Overload 2*  \n  :param buffer: (java.nio.ByteBuffer) - The buffer",
  "addChar": "**Incompatible overloads text - text from the first overload:**\n\nAppend a char to this column.\n\n*Overload 1*  \n  :param value: (char) - The value to append\n  \n*Overload 2*  \n  :param value: (char) - The value to append\n  :param count: (long) - The number of times to append the value",
  "addChars": "Add char values from an array.\n\n:param values: (char[]) - The array of values\n:param startIndex: (int) - The index of the first value to add\n:param length: (int) - The total number of values to add",
  "addDouble": "**Incompatible overloads text - text from the first overload:**\n\nAppend a double to this column count times.\n\n*Overload 1*  \n  :param value: (double) - The value to append\n  \n*Overload 2*  \n  :param value: (double) - The value to append\n  :param count: (long) - The number of times to append the value",
  "addDoubles": "Add double values from an array.\n\n:param values: (double[]) - The array of values\n:param startIndex: (int) - The index of the first value to add\n:param length: (int) - The total number of values to add",
  "addFloat": "**Incompatible overloads text - text from the first overload:**\n\nAppend a float to this column count times.\n\n*Overload 1*  \n  :param value: (float) - The value to append\n  \n*Overload 2*  \n  :param value: (float) - The value to append\n  :param count: (long) - The number of times to append the value",
  "addFloats": "Add float values from an array.\n\n:param values: (float[]) - The array of values\n:param startIndex: (int) - The index of the first value to add\n:param length: (int) - The total number of values to add",
  "addFromArray": "Add values from an array of the \"correct\" type. That is, a primitive array for columns of a primitive type,\n and an appropriately typed array of objects for all other columns.\n Non-array or incorrect types may result in an exception or undefined behavior.\n\n:param array: (java.lang.Object) - The array of values\n:param startIndex: (int) - The index of the first value to add\n:param length: (int) - The total number of values to add",
  "addFromBooleanChunk": "Add all values from source in the range [0, source.size()).\n\n:param source: (io.deephaven.db.v2.sources.chunk.ObjectChunk<java.lang.Boolean,? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source ObjectChunk",
  "addFromBoxedValue": "**Incompatible overloads text - text from the first overload:**\n\nAdd a value multiple times, with type-specific unboxing and null-conversion for primitive wrapper classes.\n\n*Overload 1*  \n  :param value: (AppendableColumn.DATA_TYPE) - The value to add\n  \n*Overload 2*  \n  :param value: (AppendableColumn.DATA_TYPE) - The value to add\n  :param count: (long) - The number of times to add the value",
  "addFromByteChunk": "Add all values from source in the range [0, source.size()).\n\n:param source: (io.deephaven.db.v2.sources.chunk.ByteChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source ByteChunk",
  "addFromCharChunk": "Add all values from source in the range [0, source.size()).\n\n:param source: (io.deephaven.db.v2.sources.chunk.CharChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source CharChunk",
  "addFromChunk": "Add all values from source in the range [0, source.size()).\n\n:param source: (io.deephaven.db.v2.sources.chunk.Chunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source Chunk",
  "addFromChunkSource": "**Incompatible overloads text - text from the first overload:**\n\nAdd all values from source specified by orderedKeys in units of chunkCapacity.\n\n*Overload 1*  \n  :param source: (io.deephaven.db.v2.sources.chunk.ChunkSource<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The ChunkSource to get values from\n  :param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - The keys to get from source\n  :param chunkCapacity: (int) - The unit of work for ChunkSource.getChunk(ChunkSource.GetContext, OrderedKeys) and AppendableColumn.addFromChunk(Chunk)\n  \n*Overload 2*  \n  :param source: (io.deephaven.db.v2.sources.chunk.ChunkSource<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The ChunkSource to get values from\n  :param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - The keys to get from source\n  :param chunkCapacity: (int) - The unit of work for ChunkSource.getChunk(ChunkSource.GetContext, OrderedKeys) and AppendableColumn.addFromChunk(Chunk)\n  :param sharedContext: (io.deephaven.db.v2.sources.chunk.SharedContext) - An optional SharedContext for use in creating a ChunkSource.GetContext\n  \n*Overload 3*  \n  :param context: (io.deephaven.db.v2.sources.chunk.ChunkSource.GetContext) - A ChunkSource.GetContext made from source\n  :param source: (io.deephaven.db.v2.sources.chunk.ChunkSource<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The ChunkSource to get values from\n  :param orderedKeys: (io.deephaven.db.v2.utils.OrderedKeys) - The keys to get from source",
  "addFromColumnSource": "Deprecated.\n\n*Overload 1*  \n  :param source: (io.deephaven.db.v2.sources.ColumnSource<AppendableColumn.DATA_TYPE>) - The source ColumnSource\n  :param sourceKey: (long) - The key within source that contains the value to be added\n  \n*Overload 2*  \n  :param source: (io.deephaven.db.v2.sources.ColumnSource<AppendableColumn.DATA_TYPE>) - The source ColumnSource\n  :param sourceKeys: (long[]) - The keys within source that contain the values to be added\n  \n*Overload 3*  \n  :param source: (io.deephaven.db.v2.sources.ColumnSource<AppendableColumn.DATA_TYPE>) - The source ColumnSource\n  :param index: (io.deephaven.db.v2.utils.Index) - An index whose keys within source contain the values to be added\n  \n*Overload 4*  \n  :param source: (io.deephaven.db.v2.sources.ColumnSource<AppendableColumn.DATA_TYPE>) - The source ColumnSource\n  :param keyIterator: (java.util.PrimitiveIterator.OfLong) - An iterator of keys within source that contain the values to be added",
  "addFromDataColumn": "Deprecated. \n\n:param source: (io.deephaven.db.tables.DataColumn<AppendableColumn.DATA_TYPE>) - The source DataColumn\n:param sourcePosition: (int) - The position within source that contains the value to be added",
  "addFromDoubleChunk": "Add all values from source in the range [0, source.size()).\n\n:param source: (io.deephaven.db.v2.sources.chunk.DoubleChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source DoubleChunk",
  "addFromFloatChunk": "Add all values from source in the range [0, source.size()).\n\n:param source: (io.deephaven.db.v2.sources.chunk.FloatChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source FloatChunk",
  "addFromIntChunk": "Add all values from source in the range [0, source.size()).\n\n:param source: (io.deephaven.db.v2.sources.chunk.IntChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source IntChunk",
  "addFromLongChunk": "Add all values from source in the range [0, source.size()).\n\n:param source: (io.deephaven.db.v2.sources.chunk.LongChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source LongChunk",
  "addFromObjectChunk": "Add all values from source in the range [0, source.size()).\n\n:param source: (io.deephaven.db.v2.sources.chunk.ObjectChunk<AppendableColumn.DATA_TYPE,? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source ObjectChunk",
  "addFromShortChunk": "Add all values from source in the range [0, source.size()).\n\n:param source: (io.deephaven.db.v2.sources.chunk.ShortChunk<? extends io.deephaven.db.v2.sources.chunk.Attributes.Values>) - The source ShortChunk",
  "addInt": "**Incompatible overloads text - text from the first overload:**\n\nAppend a int to this column.\n\n*Overload 1*  \n  :param value: (int) - The value to append\n  \n*Overload 2*  \n  :param value: (int) - The value to append\n  :param count: (long) - The number of times to append the value",
  "addInts": "Add int values from an array.\n\n:param values: (int[]) - The array of values\n:param startIndex: (int) - The index of the first value to add\n:param length: (int) - The total number of values to add",
  "addLong": "**Incompatible overloads text - text from the first overload:**\n\nAppend a long to this column.\n\n*Overload 1*  \n  :param value: (long) - The value to append\n  \n*Overload 2*  \n  :param value: (long) - The value to append\n  :param count: (long) - The number of times to append the value",
  "addLongs": "Add long values from an array.\n\n:param values: (long[]) - The array of values\n:param startIndex: (int) - The index of the first value to add\n:param length: (int) - The total number of values to add",
  "addShort": "**Incompatible overloads text - text from the first overload:**\n\nAppend a short to this column.\n\n*Overload 1*  \n  :param value: (short) - The value to append\n  \n*Overload 2*  \n  :param value: (short) - The value to append\n  :param count: (long) - The number of times to append the value",
  "addShorts": "Add short values from an array.\n\n:param values: (short[]) - The array of values\n:param startIndex: (int) - The index of the first value to add\n:param length: (int) - The total number of values to add",
  "close": "Persist all added data and release any system resources consumed by this column.",
  "force": "Persist all added data.",
  "getAddHelper": "Get a type-appropriate helper instance for complex append operations.\n\n:return: (io.deephaven.db.tables.appendable.helpers.AppendableColumnAddHelper<AppendableColumn.DATA_TYPE>) An add-helper for this column",
  "getName": "The name of this column in the enclosing table.\n\n:return: (java.lang.String) The name of this column",
  "getType": ":return: (java.lang.Class<AppendableColumn.DATA_TYPE>) the type of object contained within this column."
 },
 "path": "io.deephaven.db.tables.appendable.AppendableColumn",
 "text": "Appendable columns for ordered output.",
 "typeName": "interface"
}