{
 "className": "io.deephaven.db.tables.appendable.BufferedAppendable",
 "methods": {
  "close": "Flush all appended data to the underlying store, release any resources held, and force all appended data to\n be persisted to permanent storage.\n This should be the final access to this appendable (if successful) with the exception of any asynchronous\n BufferedAppendable.force() operations. A BufferedAppendable.release() is appropriate afterwards, especially on error.",
  "flush": "Write all appended data to the underlying store and prepare for subsequent writes. Does not imply BufferedAppendable.force().",
  "force": "Force all flushed data to be persisted to permanent storage.\n Will consistently and atomically persist the last prepared checkpoint in implementations that implement\n BufferedAppendable.prepareCheckpoint().\n Does not imply BufferedAppendable.flush(), as this is a distinct operation in all implementations.\n May be called concurrently by threads other than the \"writing thread\".",
  "maybeForce": "Perform a BufferedAppendable.force() if there is data pending persistence. Implementations that don't keep track of pending\n data explicitly will always invoke BufferedAppendable.force() pessimistically.\n\n:return: (boolean) Whether this call may have done any actual work (i.e. there was data pending or assumed to be pending)",
  "prepareCheckpoint": "Optional operation.\n Prepare a checkpoint snapshot for the next call to BufferedAppendable.force().\n Should be called directly after BufferedAppendable.flush(), with no intervening modification operations.",
  "release": "Release any resources held. Called after an error in preparation for termination.\n For external callers, this should be done as the final access to this column with the exception of any\n asynchronous BufferedAppendable.force() operations."
 },
 "path": "io.deephaven.db.tables.appendable.BufferedAppendable",
 "text": "Interface for appendable objects with built-in buffering.\n In general, all operations but for BufferedAppendable.force() should be done on the \"writing thread\" or\n under a lock that also ensures mutually-exclusive writing.",
 "typeName": "interface"
}