{
 "className": "io.deephaven.db.tables.appendable.AppendableTable",
 "methods": {
  "addRecords": "Optional method to allow one or more data rows to be appended.  This uses boxed arrays of data, and hence\n is not a preferred mechanism.  Updates size internally.\n\n:param columnData: (java.lang.Object[]) - Array of arrays (lengths *must* be identical) to append,\n                   one member per non-virtual column, in table definition order\n:param startIndex: (int) - Index within the arrays to start from\n:param length: (int) - Number of rows to append",
  "close": "Optional method to flush all data and metadata before closing underlying resources (if applicable).",
  "flush": "Optional method to flush data to this table's persistent storage (if applicable).",
  "getColumn": "Get a column for this table by name.\n\n:param columnName: (java.lang.String) - The column name\n:return: (AppendableTable.COLUMN_IMPL_TYPE) The desired column",
  "getColumnMap": ":return: java.util.Map<java.lang.String,AppendableTable.COLUMN_IMPL_TYPE>",
  "getColumns": ":return: AppendableTable.COLUMN_IMPL_TYPE[]",
  "getDefinition": ":return: io.deephaven.db.tables.TableDefinition",
  "size": ":return: (long) The size of this appendable table in rows",
  "updateSize": "Set the size of this appendable table in rows.\n This is for use by utilities that write directly to an AppendableTable's columns, in order to record that a set\n of rows has been added to all columns and should be available for checkpointing or reading.\n All columns should be flushed before this call, either externally or via the AppendableTable.flush() method.\n\n:param size: (long) - The new size"
 },
 "path": "io.deephaven.db.tables.appendable.AppendableTable",
 "text": "Interface for appending to a single partition or standalone splayed table.",
 "typeName": "interface"
}