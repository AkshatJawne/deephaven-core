config:
  anchors:
    # &name defines an anchor which allows "name" to be referenced elsewhere in the document
    # This is effectively a map of the cluster
    - &default-host "localhost"
    - &localhost    "localhost"
    - &iris-dis     "localhost"
    - &iris-rta     "localhost"
    # note that anchors and references will be lost when emitting yml after parsing it in
    # also, anchors are global, so there is potential for overriding and confusion
    # it might be better to have a "properties" or "constants" section, and add code to
    # reference these. That would require new notation and manual work.

    # Define aliases for the default port values
    # These could as easily be defined in the default sections below
    - &default-tailerPort              22011 #data.import.server.port
    - &default-lasPort                 22020
    - &default-tableDataPort           22015
    - &default-tableDataCacheProxyPort 22016
    - &default-localTableDataPort      22014 # LocalTableDataServer.tableDataServerPort

  storage:
    - name: TestDatabaseTools_DBRoot
      dbRoot: ./TestDatabaseTools_DBRoot
    - name: test_storage
      dbRoot: .
    - name: JdbcImportIntegrationTest_DBRoot
      dbRoot: ./JdbcImportIntegrationTest_DBRoot

  defaults:
    # define some properties sections to illustrate the known property values.

    # table data service defaults
    - &RemoteTableDataService-defaultProperties
      properties:
        requestTimeoutMillis: 60000
    - &LocalTableDataService-defaultProperties
      properties:
        tableLocationRefreshMillis: 60000
        tableSizeRefreshMillis: 30000
        refreshThreadPoolSize: 10
        allowLiveUserTables: false
    - &LogAggregatorService-defaultProperties
      properties:
        binaryLogTimeZone:
        messagePool.minBufferSize: 1024
        # default is unset, which takes value from global property BinaryStoreMaxEntrySize with default 1024*1024
        messagePool.maxBufferSize:
        messagePool.bucketSize: 1000
        BinaryLogQueueSink.pollTimeoutMs: 1000
        # (5 minutes)
        BinaryLogQueueSink.idleShutdownTimeoutMs: 300000
        BinaryLogQueueSink.queueSize: 1000
    - &DataImportServers-defaultProperties
      properties:

    - &DataImportServers-defaultCacheHints
      properties:
        # Table name and column name exact match:
        StringCacheHint.tableNameAndColumnNameEquals_QuoteArcaStock/Exchange: ConcurrentUnboundedStringCache,String,1
        # Column name exact match:
        # NB: USym and Sym are still using Strings - in case of issues, this should keep ImportState instances compatible across bounces.
        StringCacheHint.columnNameEquals_USym: ConcurrentUnboundedStringCache,String,20000
        StringCacheHint.columnNameEquals_Sym: ConcurrentUnboundedStringCache,String,800000
        StringCacheHint.columnNameEquals_Exchange: ConcurrentUnboundedStringCache,CompressedString,50
        StringCacheHint.columnNameEquals_SecurityType: ConcurrentUnboundedStringCache,CompressedString,9
        StringCacheHint.columnNameEquals_Parity: ConcurrentUnboundedStringCache,CompressedString,2
        # Everything else: (from IRIS-CONFIG.prop)
        StringCacheHint.default: ConcurrentBoundedStringCache,MappedCompressedString,1000000,2
        # from dh-defaults.prop
        # StringCacheHint.default: AlwaysCreateStringCache,String

    - &DIS-default # this is a DIS configuration instance that has all the default values.
                   # instances below can override only what they need to change
      tailerPort: *default-tailerPort
      throttleKbps: -1 # -1 means "no throttle"
      #userIntradayDirectoryName: "IntradayUser"
      storage: test_storage
      definitionsStorage: test_storage
      tableDataPort: *default-tableDataPort
      # These properties will be included in every dataImportServers instance
      <<: *DataImportServers-defaultProperties
      properties:
        example: "you can add it here, even after importing with <<:"

    - &LAS-default
      port: *default-lasPort
      host: *localhost
      <<: *LocalTableDataService-defaultProperties
      properties:
        example: "you can add it here, even after importing with <<:"

  dataImportServers:
    db_dis:
      <<: *DIS-default
      host: *iris-dis   # reference the address defined above for "iris-dis"
      userIntradayDirectoryName: "IntradayUser"
      webServerParameters:
        enabled: true
        port: 8086
        authenticationRequired: false
        sslRequired: false
      filters:
      - {namespaceSet: System}
      properties:
        example: you can add it here too, on top of importing defaults

    db_rta:
      <<: *DIS-default
      host: *iris-dis
      tailerPort: *default-tailerPort
      filters: {namespaceSet: User}
      description: this is for user data
      tags: [tags, for, testing]

  # the first match will be returned.
  # filter matches will be "or" matches
  logAggregatorServers: !!omap  # need an ordered map for precedence, to allow the filters to overlap
    - rta:
        <<: *LAS-default
        host: *iris-rta
        filters:
          # special value *
          # special prefix !
          # regex
          # literal (also a regex)
          - namespaceSet: User
        description: has a description

    - log_aggregator_service: # default
        <<: *LAS-default
        filters:
          # same as no filter at all
          - namespaceSet: "*"
            namespace: "*"
            tableName: "*"
          # a more concise way of saying the same
          - {namespaceSet: "*", namespace: "*", tableName: "*"}
        properties:
          BinaryLogQueueSink.pollTimeoutMs: 100
          # BinaryLogQueueSink.idleShutdownTimeoutMs == 0 shuts down queues instantly upon poll timeout
          BinaryLogQueueSink.idleShutdownTimeoutMs: 200

  # The tableDataServices section defines single and composite table data services.
  # LocalTableDataService, TableDataCacheProxy, and other republishing processes will
  # typically select the name matching the process.name property.
  tableDataServices:
    # Note: dataImportServices entries are implicitly available for use in
    # tableDataService composition.

    # define the default local (from disk) LocalTableDataService
    local:
      storage: test_storage

    # Configuration for the LocalTableDataServer named db_ltds, and define
    # the data published by that service
    db_ltds:
      host: *iris-dis
      port: *default-localTableDataPort
      storage: test_storage
      <<: *LocalTableDataService-defaultProperties

    # Configuration for the TableDataCacheProxy named db_tdcp, and define
    # the data published by that service.
    # There is typically one such service on each worker machine.
    # Configuration for the TableDataCacheProxy named db_tdcp, and define
    # the data published by that service.
    # There is typically one such service on each worker machine.
    db_tdcp:
      host: localhost
      port: *default-tableDataCacheProxyPort
      sources:
        # SYSTEM_INTRADAY tables for "current date", minus Order tables handled by Simple_LastBy
        - name: db_dis
          filters: {whereTableKey: "NamespaceSet = `System` && Namespace != `Order`", whereLocationKey: "ColumnPartition >= currentDateNy()"}
        # LTDS for SYSTEM_INTRADAY non-current date, minus Order tables handled by Simple_LastBy
        - name: db_ltds
          filters: {whereTableKey: "NamespaceSet = `System` && Namespace != `Order`", whereLocationKey: "ColumnPartition < currentDateNy()"}
        # all user data
        - name: db_rta
          filters: {namespaceSet: User}
        # only Orders data
        #- name: Simple_LastBy
        #  filters: {whereTableKey: "NamespaceSet = `System` && Namespace == `Order`"}

    # define the TableDataService for query servers.
    query:
      sources:
      - name: local
        filters: {online: false } # (system and offline) or user
      - name: db_dis
        filters: {online: true, namespaceSet: System }
      - name: db_rta
        filters: {namespaceSet: User}

    local_TestDatabaseTools_DBRoot:
      storage: TestDatabaseTools_DBRoot

    local_JdbcImportIntegrationTest_DBRoot:
      storage: JdbcImportIntegrationTest_DBRoot
      description: Sandbox DB for JDBC integration tests